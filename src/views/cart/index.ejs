<script src="/js/payment.js" defer></script>

<div class="container mx-auto px-4 py-8">
    <!-- Breadcrumb -->
    <nav class="flex mb-8 text-sm">
      <a href="/" class="text-gray-500">Home</a>
      <span class="mx-2 text-gray-500">/</span>
      <span class="text-gray-900">Cart</span>
    </nav>
  
    <h1 class="text-2xl font-bold mb-8">Your Cart</h1>
  
    <div class="flex flex-col lg:flex-row gap-8">
      <!-- Cart Items -->
      <div class="flex-1">
        <% if (cartItems && cartItems.length > 0) { %>
          <div class="space-y-6">
            <% cartItems.forEach(item => { %>
              <!-- Debug info -->
              <script>
                  console.log('Cart Item:', {
                      item: '<%= JSON.stringify(item) %>',
                      hasId: '<%= !!item._id %>',
                      id: '<%= item._id %>',
                      product: '<%= item.product_id %>',
                      quantity: '<%= item.quantity %>'
                  });
              </script>
              
              <div class="flex items-center gap-6 pb-6 border-b border-gray-200" 
                   data-cart-item="<%= item.id %>" 
                   data-size="<%= item.size %>">
                <!-- Product Image -->
                <div class="w-24 h-24 flex-shrink-0">
                  <img src="<%= item.product.images?.[0] || '/images/placeholder.jpg' %>" 
                       alt="<%= item.product.name %>" 
                       class="w-full h-full object-cover">
                </div>
  
                <!-- Product Details -->
                <div class="flex-1">
                  <h3 class="font-medium mb-1"><%= item.product.name %></h3>
                  <div class="text-sm text-gray-500 space-y-1">
                    <p>Size: <%= item.size || 'N/A' %></p>
                  </div>
                </div>
  
                <!-- Quantity Controls -->
                <div class="flex items-center gap-3">
                  <button class="w-8 h-8 flex items-center justify-center border border-gray-300 rounded-md"
                          onclick="updateCartQuantity('<%= item.id %>', '<%= item.quantity - 1 %>')">
                    -
                  </button>
                  <span class="w-8 text-center"><%= item.quantity %></span>
                  <button class="w-8 h-8 flex items-center justify-center border border-gray-300 rounded-md"
                          onclick="updateCartQuantity('<%= item.id %>', '<%= item.quantity + 1 %>')">
                    +
                  </button>
                </div>
  
                <!-- Price -->
                <div class="text-right min-w-[100px]">
                  <div class="font-medium">
                    <%= formatToVND(item.final_price * item.quantity) %>
                  </div>
                  <% if (item.discount > 0) { %>
                    <div class="text-sm text-gray-500 line-through">
                      <%= formatToVND(item.price * item.quantity) %>
                    </div>
                  <% } %>
                </div>
  
                <!-- Remove Button -->
                <button class="text-red-500 hover:text-red-600"
                        onclick="removeCartItem('<%= item.id %>')">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                  </svg>
                </button>
              </div>
            <% }); %>
          </div>
        <% } else { %>
          <div class="text-center py-12">
            <p class="text-gray-500 mb-4">Your cart is empty</p>
            <a href="/" class="inline-block bg-black text-white px-6 py-2 rounded-md hover:bg-gray-800">
              Continue Shopping
            </a>
          </div>
        <% } %>
      </div>
  
      <!-- Order Summary -->
      <div class="lg:w-[380px]">
        <div class="bg-gray-50 rounded-lg p-6">
          <h2 class="text-lg font-medium mb-4">Order Summary</h2>
          
          <div class="space-y-3 mb-6">
            <div class="flex justify-between">
              <span class="text-gray-600">Subtotal</span>
              <span class="font-medium"><%= formatToVND(total_price) %></span>
            </div>
            
            <% if (typeof discount !== 'undefined' && discount > 0) { %>
              <div class="flex justify-between text-red-500">
                <span>Discount (<%= discount %>%)</span>
                <span>-<%= formatToVND(cart.total_price * discount / 100) %></span>
              </div>
            <% } %>
            
            <div class="flex justify-between">
              <span class="text-gray-600">Delivery Fee</span>
              <span class="font-medium"><%= formatToVND(15000) %></span>
            </div>
            
            <div class="border-t border-gray-200 pt-3 flex justify-between">
              <span class="font-medium">Total</span>
              <span class="font-medium">
                <%= formatToVND(total_price * (1 - (discount || 0)/100) + 15000) %>
              </span>
            </div>
          </div>
  
          <!-- Promo Code -->
          <div class="flex gap-2 mb-6">
            <input type="text" 
                   placeholder="Add promo code" 
                   class="flex-1 px-4 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-gray-200">
            <button class="bg-black text-white px-4 py-2 rounded-md hover:bg-gray-800 text-sm">
              Apply
            </button>
          </div>
  
          <!-- Form thông tin giao hàng -->
          <div class="space-y-4 mb-6">
            <!-- Số điện thoại -->
            <div>
              <label for="phone" class="block text-sm font-medium text-gray-700">Phone Number</label>
              <input 
                type="tel" 
                id="phone" 
                name="phone"
                pattern="[0-9]{10}"
                value="<%= user.phone || '' %>"
                placeholder="<%= user.phone ? user.phone : 'Enter your phone number' %>"
                class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-black focus:border-black"
                required
              >
              <% if (!user.phone) { %>
                <p class="mt-1 text-sm text-gray-500">Please enter your phone number to contact us when delivering</p>
              <% } %>
            </div>

            <!-- Địa chỉ -->
            <div>
              <label for="address" class="block text-sm font-medium text-gray-700">Shipping Address</label>
              <input 
                type="text" 
                id="address" 
                name="address"
                value="<%= user.address || '' %>"
                placeholder="<%= user.address ? user.address : 'Enter your shipping address' %>"
                class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-black focus:border-black"
                required
              >
              <% if (!user.address) { %>
                <p class="mt-1 text-sm text-gray-500">Please enter your address to deliver to you</p>
              <% } %>
            </div>
          </div>
  
          <!-- Checkout Button -->
          <div class="w-full">
            <button id="paymentButton" 
                    class="w-full bg-black text-white py-3 rounded-md hover:bg-gray-800 flex items-center justify-center gap-2">
              Pay with PayOS
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <script>
  async function updateQuantity(itemId, change, size) {
    try {
      const response = await fetch(`/cart/update/${itemId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ change, size })
      });
      
      if (response.ok) {
        window.location.reload();
      }
    } catch (error) {
      console.error('Error updating quantity:', error);
    }
  }
  
  async function removeItem(itemId, size) {
    if (!confirm('Are you sure you want to remove this item?')) return;
    
    try {
      const response = await fetch(`/cart/remove/${itemId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ size })
      });
      
      if (response.ok) {
        window.location.reload();
      }
    } catch (error) {
      console.error('Error removing item:', error);
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM Content Loaded'); // Debug log
    
    const paymentButton = document.getElementById('paymentButton');
    console.log('Payment button:', paymentButton); // Debug log
    
    if (paymentButton) {
      paymentButton.addEventListener('click', async function() {
        console.log('Payment button clicked'); // Debug log
        
        const phone = document.getElementById('phone').value;
        if (!phone) {
          showNotification('Please enter your phone number', 'error');
          return;
        }

        try {
          const response = await fetch('/payment/create', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ phone })
          });

          console.log('Payment response:', response); // Debug log
          const data = await response.json();
          console.log('Payment data:', data); // Debug log
          
          if (data.success) {
            window.location.href = data.paymentUrl;
          } else {
            showNotification(data.message || 'An error occurred while creating payment', 'error');
          }
        } catch (error) {
          console.error('Payment error:', error);
          showNotification('An error occurred while creating payment', 'error');
        }
      });
    }
  });
  </script>
  
  <div id="toast" class="fixed top-4 right-4 z-50 transform transition-all duration-300 translate-x-full opacity-0">
    <div class="flex items-center p-4 bg-white border rounded-lg shadow-lg min-w-[300px]">
        <div class="mr-3 hidden" id="toast-success">
            <svg class="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
            </svg>
        </div>
        <div class="mr-3 hidden" id="toast-error">
            <svg class="w-5 h-5 text-red-500" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
            </svg>
        </div>
        <p id="toast-message" class="text-sm text-gray-800"></p>
    </div>
  </div>

  <script>
  function showNotification(message, type = 'success') {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toast-message');
    const successIcon = document.getElementById('toast-success');
    const errorIcon = document.getElementById('toast-error');
    
    toastMessage.textContent = message;
    
    // Reset classes
    successIcon.classList.add('hidden');
    errorIcon.classList.add('hidden');
    
    // Show correct icon
    if (type === 'success') {
        successIcon.classList.remove('hidden');
    } else {
        errorIcon.classList.remove('hidden');
    }
    
    // Show toast
    toast.classList.remove('translate-x-full', 'opacity-0');
    
    // Hide after 3 seconds
    setTimeout(() => {
        toast.classList.add('translate-x-full', 'opacity-0');
    }, 3000);
  }
  </script>

  <script>
document.getElementById('paymentButton').addEventListener('click', async () => {
  const phoneInput = document.getElementById('phone');
  const phone = phoneInput.value.trim();

  console.log('Phone value:', phone); // Debug log

  // Validate số điện thoại với regex
  const phoneRegex = /^[0-9]{10}$/;
  if (!phone || !phoneRegex.test(phone)) {
    showNotification('Please enter a valid phone number (10 digits)', 'error');
    phoneInput.focus();
    return;
  }

  try {
    // Tạo FormData object
    const formData = new FormData();
    formData.append('phone', phone);

    const response = await fetch('/payment/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        phone: phone // Đảm bảo gửi đúng format
      })
    });

    console.log('Request sent with phone:', phone); // Debug log

    const data = await response.json();
    console.log('Payment response:', data); // Debug log

    if (data.success) {
      window.location.href = data.paymentUrl;
    } else {
      showNotification(data.message || 'An error occurred while creating payment', 'error');
    }
  } catch (error) {
    console.error('Payment error:', error);
    showNotification('An error occurred while creating payment', 'error');
  }
});

// Thêm validate khi nhập
document.getElementById('phone').addEventListener('input', function(e) {
  // Chỉ cho phép nhập số
  this.value = this.value.replace(/[^0-9]/g, '');
  
  // Giới hạn 10 số
  if (this.value.length > 10) {
    this.value = this.value.slice(0, 10);
  }
});
</script>